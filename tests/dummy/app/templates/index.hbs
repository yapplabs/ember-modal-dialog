{{! template-lint-disable no-curly-component-invocation }}
<h1 id="title">
  Basic examples of the
  <code>modal-dialog</code>
  component
</h1>

<p>
  This component uses
  <code>ember-wormhole</code>
  to relocate the dialog in the DOM to better sit in a layer
  above the rest of your document.
</p>
<p>
  It requires no additional dependencies because
  <code>ember-wormhole</code>
  is included with this addon. If
  <code>liquid-wormhole</code>
  is installed, this component will detect it, and will become
  <LinkTo @route="animatable">animatable</LinkTo>
  if
  <code>animatable=true</code>
  is passed.
</p>

<div class="example" id="example-basic">
  <h2>Basic</h2>

  <button
    onclick={{action (mut this.isShowingBasic) true}}
    type="button"
  >
    Do It
  </button>

  <CodeBlock
    @code={{get this.codeSnippets "basic-modal-dialog-hbs"}}
    @language="hbs"
  />

  {{#if this.isShowingBasic}}
    <ModalDialog
      data-test="my-data-test"
      @onClose={{action (mut this.isShowingBasic) false}}
    >
      <h1>Stop! Modal Time!</h1>
      <p>Basic</p>
      <button
        onclick={{action (mut this.isShowingBasic) false}}
        type="button"
      >
        Close
      </button>
    </ModalDialog>
  {{/if}}
</div>

<div class="example" id="example-translucent">
  <h2>With Translucent Overlay</h2>

  <button
    onclick={{action (mut this.isShowingTranslucent) true}}
    type="button"
  >
    Do It
  </button>

  <CodeBlock
    @code={{get
      this.codeSnippets
      "translucent-modal-dialog-hbs"
    }}
    @language="hbs"
  />

  {{#if this.isShowingTranslucent}}
    <ModalDialog
      data-test="my-data-test"
      @onClose={{action (mut this.isShowingTranslucent) false}}
      @translucentOverlay={{true}}
    >
      <h1>Stop! Modal Time!</h1>
      <p>With Translucent Overlay</p>
      <button
        onclick={{action (mut this.isShowingTranslucent) false}}
        type="button"
      >
        Close
      </button>
    </ModalDialog>
  {{/if}}
</div>

<div class="example" id="example-translucent-with-callback">
  <h2>Translucent Overlay with Callback</h2>

  <button
    onclick={{action
      (mut this.isShowingTranslucentWithCallback)
      true
    }}
    type="button"
  >
    Do It
  </button>

  <CodeBlock
    @code={{get
      this.codeSnippets
      "translucent-modal-dialog-with-callback-hbs"
    }}
    @language="hbs"
  />

  {{#if this.isShowingTranslucentWithCallback}}
    <ModalDialog
      data-test="my-data-test"
      @onClose={{action
        (mut this.isShowingTranslucentWithCallback)
        false
      }}
      @translucentOverlay={{true}}
      @onClickOverlay={{action "clickedTranslucentOverlay"}}
    >
      <h1>Stop! Modal Time!</h1>
      <p>Translucent Overlay with Callback</p>
      <button
        onclick={{action
          (mut this.isShowingTranslucentWithCallback)
          false
        }}
        type="button"
      >
        Close
      </button>
    </ModalDialog>
  {{/if}}
</div>

<div class="example" id="example-without-overlay">
  <h2>Without Overlay</h2>

  <button
    onclick={{action (mut this.isShowingWithoutOverlay) true}}
    type="button"
  >
    Do It
  </button>

  <CodeBlock
    @code={{get
      this.codeSnippets
      "modal-dialog-without-overlay-hbs"
    }}
    @language="hbs"
  />

  {{#if this.isShowingWithoutOverlay}}
    <ModalDialog
      data-test="my-data-test"
      @onClose={{action
        (mut this.isShowingWithoutOverlay)
        false
      }}
      @hasOverlay={{false}}
      @clickOutsideToClose={{true}}
    >
      <h1>Stop! Modal Time!</h1>
      <p>Without Overlay</p>
      <button
        onclick={{action
          (mut this.isShowingWithoutOverlay)
          false
        }}
        type="button"
      >
        Close
      </button>
    </ModalDialog>
  {{/if}}
</div>

<div class="example" id="example-overlay-sibling">
  <h2>With Overlay as a Sibling in the DOM</h2>

  <button
    onclick={{action (mut this.isShowingSibling) true}}
    type="button"
  >
    Do It
  </button>

  <CodeBlock
    @code={{get
      this.codeSnippets
      "translucent-modal-dialog-sibling-hbs"
    }}
    @language="hbs"
  />

  {{#if this.isShowingSibling}}
    <ModalDialog
      data-test="my-data-test"
      @onClose={{action (mut this.isShowingSibling) false}}
      @translucentOverlay={{true}}
      @overlayPosition="sibling"
    >
      <h1>Stop! Modal Time!</h1>
      <p>With Translucent Overlay as Sibling</p>
      <button
        onclick={{action (mut this.isShowingSibling) false}}
        type="button"
      >
        Close
      </button>
    </ModalDialog>
  {{/if}}
</div>

<div class="example" id="example-custom-styles">
  <h2>Custom Styles</h2>

  <button
    onclick={{action (mut this.isShowingCustomStyles) true}}
    type="button"
  >
    Do It
  </button>

  <CodeBlock
    @code={{get
      this.codeSnippets
      "custom-styles-modal-dialog-hbs"
    }}
    @language="hbs"
  />

  <CodeBlock
    @code={{get this.codeSnippets "custom-styles-css"}}
    @language="css"
  />

  {{#if this.isShowingCustomStyles}}
    <ModalDialog
      data-test="my-data-test"
      @onClose={{action (mut this.isShowingCustomStyles) false}}
      @targetAttachment="none"
      @containerClass={{this.customContainerClassNames}}
      @overlayClass="custom-styles-overlay"
    >
      <h1>Stop! Modal Time!</h1>
      <p>Custom Styles</p>
      <button
        onclick={{action
          (mut this.isShowingCustomStyles)
          false
        }}
        type="button"
      >
        Close
      </button>
    </ModalDialog>
  {{/if}}
</div>
<div class="example" id="example-target-selector">
  <h2>Target (Selector)</h2>

  <div>
    <button
      id="alignModalDialogToMe"
      type="button"
      {{action "toggleTargetSelector"}}
    >
      Do It
    </button>
  </div>

  <CodeBlock
    @code={{get
      this.codeSnippets
      "target-selector-modal-dialog-hbs"
    }}
    @language="hbs"
  />

  {{#if this.isShowingTargetSelector}}
    <ModalDialog
      data-test="my-data-test"
      @onClose={{action "toggleTargetSelector"}}
      @targetAttachment={{this.exampleTargetAttachment}}
      @attachment={{this.exampleAttachment}}
      @target="#alignModalDialogToMe"
    >
      <h1>Stop! Modal Time!</h1>
      <p>Target - Selector: "#alignModalDialogToMe"</p>
      <p>Target Attachment: {{this.exampleTargetAttachment}}</p>
      <p>Attachment: {{this.exampleAttachment}}</p>
      <button type="button" {{action "closeTargetSelector"}}>
        Close
      </button>
    </ModalDialog>
  {{/if}}
</div>

<div class="example" id="example-target-element">
  <h2>Target (Element)</h2>

  <div>
    <span id="bwmde">
      <button type="button" {{action "toggleTargetElement"}}>
        Do It
      </button>
    </span>
  </div>

  <CodeBlock
    @code={{get
      this.codeSnippets
      "target-element-modal-dialog-hbs"
    }}
    @language="hbs"
  />

  {{#if this.isShowingTargetElement}}
    <ModalDialog
      data-test="my-data-test"
      @onClose={{action "toggleTargetElement"}}
      @targetAttachment={{this.exampleTargetAttachment}}
      @attachment={{this.exampleAttachment}}
      @target="#bwmde"
    >
      <h1>Stop! Modal Time!</h1>
      <p>Target - Element #bwmde</p>
      <p>Target Attachment: {{this.exampleTargetAttachment}}</p>
      <p>Attachment: {{this.exampleAttachment}}</p>
      <button type="button" {{action "closeTargetElement"}}>
        Close
      </button>
    </ModalDialog>
  {{/if}}
</div>

<div class="example" id="example-subclass">
  <h2>Via Subclass</h2>

  <button
    onclick={{action (mut this.isShowingSubclassed) true}}
    type="button"
  >
    Do It
  </button>

  <CodeBlock
    @code={{get this.codeSnippets "subclass-js"}}
    @language="js"
  />

  <CodeBlock
    @code={{get this.codeSnippets "subclass-modal-dialog-hbs"}}
    @language="hbs"
  />

  <CodeBlock
    @code={{get this.codeSnippets "subclass-styles-css"}}
    @language="css"
  />

  {{#if this.isShowingSubclassed}}
    <MyCoolModalDialog
      data-test="my-data-test"
      @onClose={{action (mut this.isShowingSubclassed) false}}
      @translucentOverlay={{true}}
    >
      <h1>Stop! Modal Time!</h1>
      <p>Via Subclass</p>
      <button
        onclick={{action (mut this.isShowingSubclassed) false}}
        type="button"
      >
        Close
      </button>
    </MyCoolModalDialog>
  {{/if}}
</div>

<div class="example" id="example-subclass-2">
  <h2>Via Subclass</h2>

  <button
    onclick={{action (mut this.isShowingSubclassed2) true}}
    type="button"
  >
    Do It
  </button>

  <CodeBlock
    @code={{get this.codeSnippets "subclass-js"}}
    @language="js"
  />

  <CodeBlock
    @code={{get
      this.codeSnippets
      "subclass-modal-dialog-2-hbs"
    }}
    @language="hbs"
  />

  <CodeBlock
    @code={{get this.codeSnippets "subclass-styles-css"}}
    @language="css"
  />

  {{#if this.isShowingSubclassed2}}
    <MyCoolModalDialogTwo
      data-test="my-data-test"
      @onClose={{action (mut this.isShowingSubclassed2) false}}
      @translucentOverlay={{true}}
    >
      <h1>Stop! Modal Time!</h1>
      <p>Via Subclass</p>
      <button
        onclick={{action (mut this.isShowingSubclassed2) false}}
        type="button"
      >
        Close
      </button>
    </MyCoolModalDialogTwo>
  {{/if}}
</div>

<div class="example" id="example-in-place">
  <h2>In Place</h2>

  <button
    onclick={{action (mut this.isShowingInPlace) true}}
    type="button"
  >
    Do It
  </button>

  <CodeBlock
    @code={{get this.codeSnippets "in-place-modal-dialog-hbs"}}
    @language="hbs"
  />

  <CodeBlock
    @code={{get this.codeSnippets "in-place-css"}}
    @language="css"
  />

  <div id="container-in-place">
    I AM THE CONTAINER
    {{#if this.isShowingInPlace}}
      <ModalDialog
        data-test="my-data-test"
        @onClose={{action (mut this.isShowingInPlace) false}}
        @renderInPlace={{true}}
        @targetAttachment="none"
        @containerClass="ember-modal-dialog-in-place my-custom-class"
        @overlayClass="ember-modal-overlay-in-place"
      >
        <h1>Stop! Modal Time!</h1>
        <p>In Place</p>
        <button
          onclick={{action (mut this.isShowingInPlace) false}}
          type="button"
        >
          Close
        </button>
      </ModalDialog>
    {{/if}}
  </div>
</div>

<div class="example" id="example-in-place-2">
  <h2>In Place</h2>

  <button
    onclick={{action (mut this.isShowingInPlace2) true}}
    type="button"
  >
    Do It
  </button>

  <CodeBlock
    @code={{get
      this.codeSnippets
      "in-place-modal-dialog-2-hbs"
    }}
    @language="hbs"
  />

  <CodeBlock
    @code={{get this.codeSnippets "in-place-css"}}
    @language="css"
  />

  <div id="container-in-place-2">
    I AM THE CONTAINER
    {{#if this.isShowingInPlace2}}
      <ModalDialog
        data-test="my-data-test"
        @onClose={{action (mut this.isShowingInPlace2) false}}
        @renderInPlace={{true}}
        @targetAttachment="none"
        @containerClassNames="ember-modal-dialog-in-place my-custom-class-2"
        @overlayClassNames="ember-modal-overlay-in-place"
      >
        <h1>Stop! Modal Time!</h1>
        <p>In Place</p>
        <button
          onclick={{action (mut this.isShowingInPlace2) false}}
          type="button"
        >
          Close
        </button>
      </ModalDialog>
    {{/if}}
  </div>
</div>

<div class="example" id="example-centered-scrolling">
  <h2>Centered Scrolling</h2>

  <button type="button" {{action "toggleCenteredScrolling"}}>
    Do It
  </button>

  <CodeBlock
    @code={{get
      this.codeSnippets
      "centered-scrolling-modal-dialog-hbs"
    }}
    @language="hbs"
  />

  <CodeBlock
    @code={{get this.codeSnippets "centered-scrolling-css"}}
    @language="css"
  />

  <div id="container-centered-scrolling">
    {{#if this.isShowingCenteredScrolling}}
      <ModalDialog
        data-test="my-data-test"
        @onClose={{action "toggleCenteredScrolling"}}
        @translucentOverlay={{true}}
        @targetAttachment="none"
        @containerClass="centered-scrolling-container"
        @overlayClass="centered-scrolling-overlay"
        @wrapperClass="centered-scrolling-wrapper"
      >
        <h1>Really Long Content To Demonstrate Scrolling</h1>
        <ul>
          <li>Hover over modal and scroll</li>
          <li>Also hover over overlay and scroll</li>
        </ul>
        {{lorem-ipsum length=30000}}
        <button
          type="button"
          {{action "toggleCenteredScrolling"}}
        >
          Close
        </button>
      </ModalDialog>
    {{/if}}
  </div>
</div>

<div class="example">
  <h2>Element Center</h2>

  <span id="elementCenter">
    <button
      onclick={{action
        (mut this.isShowingElementCenterModal)
        true
      }}
      type="button"
    >
      Do It
    </button>
  </span>

  <CodeBlock
    @code={{get
      this.codeSnippets
      "element-centered-modal-dialog-hbs"
    }}
    @language="hbs"
  />

  {{#if this.isShowingElementCenterModal}}
    <ModalDialog
      data-test="my-data-test"
      @onClose={{action
        (mut this.isShowingElementCenterModal)
        false
      }}
      @elementId={{this.elementId}}
      @translucentOverlay={{true}}
      @targetAttachment="elementCenter"
      @target="#elementCenter"
    >
      <p>Centered on element.</p>
    </ModalDialog>
  {{/if}}
</div>